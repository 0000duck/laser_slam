<?xml version="1.0" encoding="utf-8"?>

<launch>
  <!-- Assemble point clouds without IMU and odometry. -->
  <arg name="naive_assembling" default="fasle"/>
  <!-- In case primal sensor frame is rotating: Transpose pcl to fixed sensor frame. -->
  <arg name="rotating_sensor_frame"      default="false" />
  <!-- The ID of the fixed world frame. -->
  <arg name="fixed_frame_id" default="odom" />
  <!-- The ID of the frame attached to the robot base. -->
  <arg name="vehicle_base_frame_id" default="base_link"/>
  <!-- The ID of the sensor (the point clouds are assumed to be in this frame. -->
  <arg name="velodyne_frame_id" default="velodyne"/>
  <!-- The ID of the fixed sensor (if the primal sensor frame is rotating.
       The output pcl will be in this frame.) -->
  <arg name="velodyne_fixed_frame_id" default="velodyne_axis_aligned"/>
  <!-- Topic to listen to for velodyne packets. -->
  <arg name="velodyne_topic" default="/velodyne_points"/>
  <!-- Topic to listen to for odometry messages. -->
  <arg name="odom_topic" default="/odom"/> 
  <!-- Topic to publish assembled point clouds. -->
  <arg name="output_topic" default="/velodyne_assembled_cloud"/>



  <!-- velodyne_assembler node -->
  <node name="velodyne_assembler" pkg="velodyne_assembler" type="velodyne_assembler_node" output="screen" respawn="true">
    <param name="naive_assembling" value="$(arg naive_assembling)"/>
    <param name="rotating_sensor_frame"       value="$(arg rotating_sensor_frame)" />
    <param name="fixed_frame_id" value="$(arg fixed_frame_id)"/>
    <param name="vehicle_base_frame_id" value="$(arg vehicle_base_frame_id)"/>
    <param name="sensor_frame_id" value="$(arg velodyne_frame_id)"/>
    <param name="sensor_frame_fixed_id" value="$(arg velodyne_fixed_frame_id)"/>
    <param name="input_points" value="$(arg velodyne_topic)"/>
    <param name="assembled_cloud" value="$(arg output_topic)"/>
  </node>

</launch>
